{"version":3,"sources":["components/header.tsx","components/sidebar.tsx","components/tabs/index.tsx","components/requestViewer/headerView.tsx","components/requestViewer/summaryView.tsx","components/requestViewer/bodyView.tsx","components/requestViewer/index.tsx","components/body.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HeaderWrapper","styled","div","Header","SidebarWrapper","EntryContainer","StatusCodeWrapper","StatusCodeIndicator","props","color","code","style","backgroundColor","Sidebar","useState","requests","setRequests","useEffect","a","fetch","response","json","fetcher","map","request","summary","setUuid","key","uuid","onClick","url","method","TabsContainer","TabWrapper","TabButton","ChildContainer","Tabs","children","defaultTab","currentTab","setCurrentTab","child","ch","title","filter","Tab","Container","HeaderTable","table","Row","tr","Column","td","HeaderView","reqHeaders","headers","respHeaders","Object","keys","SummaryView","startDate","Date","start","endDate","end","originalUrl","toLocaleString","getTime","body","Code","BodyView","JSON","stringify","BodyFlexContainer","RequestViewer","BodyWrapper","Body","setCurrentUuid","currentTransaction","setCurrentTransaction","loading","setLoading","placeholder","resp","blob","asyncChanger","AppWrapper","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.354adf4a.chunk.js","sourcesContent":["import React from 'react';\n\nimport styled from 'styled-components';\n\nconst HeaderWrapper = styled.div`\nbackground-color: #37474F;\n\nwidth: 100%;\nmargin: 0px;\npadding-left: 1em;\nheight: 4em;\n\nflex-grow: 0;\n\nvertical-align: middle;\ndisplay: table-cell;\n\nfont-family: 'Roboto', sans-serif;\ncolor: white;\n\nborder-bottom: 2px solid #333;\n`\n\nfunction Header() {\n\treturn (<HeaderWrapper>\n\t\t\t\t<h1>ExpressJS debug toolbar</h1>\n\t\t\t</HeaderWrapper>);\n}\n\nexport default Header","import React, {useState, useEffect} from 'react';\n\nimport styled from 'styled-components';\n\nconst SidebarWrapper = styled.div`\nwidth: 30em;\nbackground-color: #37474F;\nmargin: 0px;\n\nfont-family: 'Roboto', sans-serif;\ncolor: white;\n\nborder-right: 1px solid #333;\n`\n\nconst EntryContainer = styled.div`\n\tpadding: 1em;\n\n\tborder-bottom: 1px solid #333;\n\t\n\tcursor: pointer;\n\n\t>p {\n\t\tfont-size: 1.3em;\n\t}\n\n\t:hover {\n\t\tbackground-color: #263238;\n\t}\n`\n\nconst StatusCodeWrapper = styled.div`\n\tborder-radius: 5px;\n\twidth: 4em;\n\tdisplay: table-cell;\n\ttext-align: center;\n\tvertical-align: middle;\n\n\tbackground-color: gray;\n\n\t> p {\n\t\tmargin: 0px;\n\t}\n`\n\ntype TransactionSummary = {\n  uuid: string,\n  url: string,\n  method: string,\n  code: number,\n\n  start: Date,\n  end: Date,\n}\n\ntype StatusCodeProps = {\n\tcode: number\n}\n\ntype SidebarProps = {\n\tsetUuid: (uuid: string) => void\n}\n\nfunction StatusCodeIndicator(props: StatusCodeProps) {\n\tlet color = \"#4CAF50\"\n\n\tif(props.code >= 300 && props.code < 400) {\n\t\tcolor = \"#673AB7\"\n\t}\n\telse if(props.code >= 400 && props.code < 500) {\n\t\tcolor = \"#F44336\"\n\t}\n\telse if(props.code >= 500 && props.code < 600) {\n\t\tcolor = \"#212121\"\n\t}\n\n\n\treturn (<StatusCodeWrapper style={{backgroundColor: color}}>\n\t\t<p>{props.code}</p>\n\t</StatusCodeWrapper>)\n}\n\nfunction CreateRequestEntry(summary: TransactionSummary, setUuid: (uuid: string) => void) {\n\treturn (<EntryContainer key={summary.uuid} onClick={() => { setUuid(summary.uuid); }}>\n\t\t<h3>{summary.url}</h3>\n\t\t<StatusCodeIndicator code={summary.code} /><StatusCodeWrapper>{summary.method}</StatusCodeWrapper>\n\t</EntryContainer>)\n}\n\nfunction Sidebar(props: SidebarProps) {\n\tconst [requests, setRequests] = useState([])\n\n\tuseEffect( () => { \n\t\tasync function fetcher() {\n\t\t\tconst response = await fetch(`/_debug/api/`)\n\t\t\tsetRequests(await response.json())\n\t\t}\n\t\tfetcher()\n\t}, [])\n\n\treturn (<SidebarWrapper>\n\t\t\t\t{ \n\t\t\t\t\trequests.map(request => { \n\t\t\t\t\t\treturn CreateRequestEntry(request, props.setUuid) \n\t\t\t\t\t}) \n\t\t\t\t}\n\t\t\t</SidebarWrapper>);\n}\n\nexport default Sidebar","import React, {\n  createContext,\n  useState,\n  useMemo,\n  useContext,\n  cloneElement,\n  isValidElement,\n  FunctionComponent,\n  ReactNode\n} from 'react'\n\nimport styled from 'styled-components';\n\nconst TabsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TabWrapper = styled.div`\n  display: flex;\n`\n\nconst TabButton = styled.div`\n  min-width: 2em;\n  font-size: 1.2em;\n  padding: 1em;\n  padding-right: 1.5em;\n\n  cursor: pointer;\n\n  :hover {\n    background-color: rgba(0,0,0,0.2);\n  }\n`\n\nconst ChildContainer = styled.div`\n\n`\n\ntype TabsProps = {\n  children: Array<ReactNode>,\n  defaultTab: string\n}\n\nexport const Tabs: FunctionComponent<TabsProps> = ({children, defaultTab}: TabsProps) => {\n  const [currentTab, setCurrentTab] = useState(defaultTab)\n  return (\n    <TabsContainer>\n      <TabWrapper>\n        { \n          children.map((child) => {\n            const ch: any = child as any //Forgive me lord for i have sinned\n            return <TabButton style={ch.props.title==currentTab?{backgroundColor: \"rgba(0,0,0,0.2)\"}:{}}key={ch.props.title} onClick={() => {\n              setCurrentTab(ch.props.title)\n            }}>{ch.props.title}</TabButton>\n          })\n        }\n      </TabWrapper>\n      <ChildContainer>\n        { \n          children.filter((child) => {\n            const ch: any = child as any\n            return ch.props.title == currentTab\n          }) \n        }\n      </ChildContainer>\n    </TabsContainer>\n  )\n}\n\ntype TabProps = {\n  title: string\n}\n\nexport const Tab: FunctionComponent<TabProps> = ({ title, children }) => {\n  return (<div>{children}</div>)\n}\n","import React, { useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport { Tabs, Tab } from '../tabs'\n\n\n\nconst Container = styled.div`\npadding: 1em;\nfont-family: 'Roboto', sans-serif;\ncolor: white;\n`\n\nconst HeaderTable = styled.table`\n\tpadding: 1em;\n`\n\nconst Row = styled.tr`\n\n`\n\nconst Column = styled.td`\n\tpadding: 0.3em;\n`\n\n\ntype SerializedTransaction = {\n\trequest: {\n\t\tfresh: boolean,\n\t\thost: string,\n\t\tip: string,\n\t\tips: Array<string>,\n\t\tmethod: string,\n\t\toriginalUrl: string,\n\t\tparams: Array<string>,\n\t\tquery: { [index: string]: string},\n\t\theaders: { [index: string]: string}\n\t},\n\tresponse: {\n\t\tcode: number,\n\t\theaders: { [index: string]: string}\n\t},\n\tbody: any,\n\tmetadata: any\n}\n\ntype HeaderViewProps = {\n\trequest: SerializedTransaction\n}\n\nfunction HeaderView(props: HeaderViewProps) {\n\tconst reqHeaders = props.request.request.headers\n\tconst respHeaders = props.request.response.headers\n\treturn (<Container>\n\t\t\t\t<h1>Request headers</h1>\n\t\t\t\t\t<HeaderTable>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tObject.keys(reqHeaders).map(key => {\n\t\t\t\t\t\t\t\t\treturn (<Row key={key}>\n\t\t\t\t\t\t\t\t\t\t<Column>{key}</Column>\n\t\t\t\t\t\t\t\t\t\t<Column>{reqHeaders[key]}</Column>\n\t\t\t\t\t\t\t\t\t</Row>)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</HeaderTable>\n\t\t\t\t<h1>Response headers</h1>\n\t\t\t\t<HeaderTable>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tObject.keys(respHeaders).map(key => {\n\t\t\t\t\t\t\t\treturn (<Row key={key}>\n\t\t\t\t\t\t\t\t\t<Column>{key}</Column>\n\t\t\t\t\t\t\t\t\t<Column>{respHeaders[key]}</Column>\n\t\t\t\t\t\t\t\t</Row>)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</tbody>\n\t\t\t\t</HeaderTable>\n\t\t\t</Container>);\n}\nexport default HeaderView\n","import React, { useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport { Tabs, Tab } from '../tabs'\n\n\n\nconst Container = styled.div`\npadding: 1em;\nfont-family: 'Roboto', sans-serif;\ncolor: white;\n`\n\ntype SerializedTransaction = {\n\trequest: {\n\t\tfresh: boolean,\n\t\thost: string,\n\t\tip: string,\n\t\tips: Array<string>,\n\t\tmethod: string,\n\t\toriginalUrl: string,\n\t\tparams: Array<string>,\n\t\tquery: { [index: string]: string},\n\t\theaders: { [index: string]: string}\n\t},\n\tresponse: {\n\t\tcode: number,\n\t\theaders: { [index: string]: string}\n\t},\n\tbody: any,\n\tmetadata: any,\n\tstart: string,\n\tend: string\n}\n\ntype SummaryViewProps = {\n\trequest: SerializedTransaction\n}\n\nfunction SummaryView(props: SummaryViewProps) {\n\tconst startDate = new Date(props.request.start)\n\tconst endDate = new Date(props.request.end)\n\treturn (<Container>\n\t\t\t\t<h1>Request summary</h1>\n\t\t\t\t<p><b>{props.request.request.method}</b> {props.request.request.originalUrl}</p>\n\t\t\t\t<p>Requested at {startDate.toLocaleString()} handled in {endDate.getTime()-startDate.getTime()}ms</p>\n\t\t\t\t<p>Body type: {typeof props.request.body}</p>\n\t\t\t</Container>);\n}\nexport default SummaryView\n","import React, { useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport { Tabs, Tab } from '../tabs'\n\n\n\nconst Container = styled.div`\npadding: 1em;\nfont-family: 'Roboto', sans-serif;\ncolor: white;\n`\n\nconst Code = styled.code`\n\tbackground-color: #263238;\n\twidth: 100%;\n\tdisplay: block;\n`\n\ntype SerializedTransaction = {\n\trequest: {\n\t\tfresh: boolean,\n\t\thost: string,\n\t\tip: string,\n\t\tips: Array<string>,\n\t\tmethod: string,\n\t\toriginalUrl: string,\n\t\tparams: Array<string>,\n\t\tquery: { [index: string]: string},\n\t\theaders: { [index: string]: string}\n\t},\n\tresponse: {\n\t\tcode: number,\n\t\theaders: { [index: string]: string}\n\t},\n\tbody: any,\n\tmetadata: any,\n\tstart: string,\n\tend: string\n}\n\ntype BodyViewProps = {\n\trequest: SerializedTransaction\n}\n\nfunction BodyView(props: BodyViewProps) {\n\tconst startDate = new Date(props.request.start)\n\tconst endDate = new Date(props.request.end)\n\treturn (<Container>\n\t\t\t\t<h1>Response body</h1>\n\t\t\t\t<Code>\n\t\t\t\t{\n\t\t\t\t\t(typeof props.request.body === \"string\")\n\t\t\t\t\t? props.request.body\n\t\t\t\t\t: (\n\t\t\t\t\t\t(typeof props.request.body === \"object\")\n\t\t\t\t\t\t? JSON.stringify(props.request.body)\n\t\t\t\t\t\t: (<i>Unknown body type</i>)\n\t\t\t\t\t) \n\t\t\t\t}\n\t\t\t\t</Code>\n\t\t\t</Container>);\n}\nexport default BodyView\n","import React, { useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport { Tabs, Tab } from '../tabs'\n\nimport HeaderView from './headerView'\nimport SummaryView from './summaryView'\nimport BodyView from './bodyView'\n\n\nconst BodyWrapper = styled.div`\n\nfont-family: 'Roboto', sans-serif;\ncolor: white;\n`\n\nconst BodyFlexContainer = styled.div`\n\tdisplay: flex;\n\tflex-grow: 1;\n`\n\ntype SerializedTransaction = {\n\trequest: {\n\t\tfresh: boolean,\n\t\thost: string,\n\t\tip: string,\n\t\tips: Array<string>,\n\t\tmethod: string,\n\t\toriginalUrl: string,\n\t\tparams: Array<string>,\n\t\tquery: { [index: string]: string},\n\t\theaders: { [index: string]: string}\n\t},\n\tresponse: {\n\t\tcode: number,\n\t\theaders: { [index: string]: string}\n\t},\n\tbody: any,\n\tmetadata: any,\n\tstart: string,\n\tend: string\n}\n\ntype RequestProps = {\n\trequest: SerializedTransaction\n}\n\nfunction RequestViewer(props: RequestProps) {\n\treturn (<BodyFlexContainer>\n\t\t\t\t<Tabs defaultTab={\"Summary\"}>\n\t\t\t\t    <Tab title=\"Summary\"><SummaryView request={props.request}/></Tab>\n\t\t\t\t    <Tab title=\"Headers\"><HeaderView request={props.request}/></Tab>\n\t\t\t\t    { \n\t\t\t\t    \ttypeof props.request.body !== \"undefined\" \n\t\t\t\t    \t? (<Tab title=\"Body\"><BodyView request={props.request}/></Tab>) \n\t\t\t\t    \t: null \n\t\t\t\t    }\n\t\t\t\t</Tabs>\n\t\t\t</BodyFlexContainer>);\n}\nexport default RequestViewer\n","import React, { useState } from 'react';\n\nimport styled from 'styled-components';\nimport Sidebar from './sidebar'\nimport RequestViewer from './requestViewer'\n\n\nconst BodyWrapper = styled.div`\n\nfont-family: 'Roboto', sans-serif;\ncolor: white;\n`\n\nconst BodyFlexContainer = styled.div`\n\tdisplay: flex;\n\tflex-grow: 1;\n`\n\nfunction Body() {\n\tconst [currentUuid, setCurrentUuid] = useState(\"\")\n\tconst [currentTransaction , setCurrentTransaction] = useState<any>(null)\n\tconst [loading, setLoading] = useState(false)\n\n\tfunction changeState(uuid: string) {\n\t\tsetLoading(true)\n\t\tasync function asyncChanger() {\n\t\t\tconst resp = await fetch(`/_debug/api/${uuid}`)\n\t\t\tconst blob = await resp.json()\n\t\t\tsetCurrentUuid(uuid)\n\t\t\tsetCurrentTransaction(blob)\n\t\t\tsetLoading(false)\n\t\t}\n\t\tasyncChanger()\n\t}\n\n\tlet placeholder = (<h1>Select a request to begin</h1>)\n\n\treturn (<BodyFlexContainer>\n\t\t\t\t<Sidebar setUuid={changeState} />\n\t\t\t\t<BodyWrapper>\n\t\t\t\t\t{ loading ? \n\t\t\t\t\t\t(<p>Loading...</p>) : \n\t\t\t\t\t\t( currentTransaction !== null ? \n\t\t\t\t\t\t\t<RequestViewer request={currentTransaction} /> : \n\t\t\t\t\t\t\tplaceholder \n\t\t\t\t\t\t)  \n\t\t\t\t\t}\n\t\t\t\t</BodyWrapper>\n\t\t\t</BodyFlexContainer>);\n}\n\nexport default Body","import React from 'react';\n\nimport Header from './components/header'\nimport Body from './components/body'\n\nimport styled from 'styled-components';\n\nconst AppWrapper = styled.div`\nwidth: 100%;\nbackground-color: #37474F;\nmargin: 0px;\ndisplay: flex;\nflex-direction: column;\n`\n\nfunction App() {\n  return (\n    <AppWrapper className=\"App\">\n      <Header />\n      <Body />\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './app.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}